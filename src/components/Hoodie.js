/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useSpring, animated } from "@react-spring/three";

export default function Hoodie({ ...props }) {
  const group = useRef();
  const { nodes, materials } = useGLTF("/hoodie.gltf");
  console.log(props.landing);
  const [hoodie, setHoodie] = useState(false);

  useFrame((state) => {
    if (props.landing === true) {
      const time = state.clock.getElapsedTime();
      if (!hoodie) {
        setTimeout(() => {
          setHoodie(true);
          console.log("hoodie");
        }, 1000);
      }

      group.current.rotation.z = Math.sin(time / 2) / 30;
      group.current.rotation.x = Math.sin(time / 2) / 30;
      group.current.rotation.y = Math.sin(time / 4) / 30;
      group.current.position.y = Math.sin(time / 4) / 30;
    }
  });

  const { position } = useSpring({
    position: hoodie ? [0, -1.5, 0] : [0, -10, 0],
  });

  const { scale } = useSpring({
    scale:
      props.scroll < 0.16 ? 0.003 + props.scroll / 100 : 0.003 + 0.16 / 100,
  });
  return (
    <group ref={group} {...props} dispose={null}>
      {props.landing ? (
        <animated.mesh
          geometry={nodes.blank_hoodie002.geometry}
          material={materials.body}
          position={position}
          rotation={[Math.PI / 2, 0, 0]}
          scale={scale}
        />
      ) : (
        ""
      )}
    </group>
  );
}

useGLTF.preload("/hoodie.gltf");
